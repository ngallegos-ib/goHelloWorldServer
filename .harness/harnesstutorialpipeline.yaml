pipeline:
  name: harness-tutorial-pipeline
  identifier: harnesstutorialpipeline
  projectIdentifier: testproject
  orgIdentifier: testorg
  description: Official Harness pipeline tutorial
  tags: {}
  properties:
    ci:
      codebase:
        connectorRef: harnesstutorialrepo
        build: <+input>
  stages:
    - stage:
        name: Build Test and Push
        identifier: Build_Test_and_Push
        type: CI
        spec:
          cloneCodebase: true
          infrastructure:
            type: KubernetesDirect
            spec:
              connectorRef: account.k8salethixlabsio
              namespace: harness-delegate-ng
              automountServiceAccountToken: true
              nodeSelector: {}
              os: Linux
          execution:
            steps:
              - step:
                  type: Run
                  name: Run Unit Tests
                  identifier: Run_Unit_Tests
                  spec:
                    connectorRef: Docker_Quickstart
                    image: golang:1.15
                    shell: Sh
                    command: |-
                      go get gotest.tools/gotestsum  
                      gotestsum --format=standard-verbose --junitfile unit-tests.xml || true  
                      CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -a -tags netgo
                    reports:
                      type: JUnit
                      spec:
                        paths:
                          - "*.xml"
                  failureStrategies: []
                  when:
                    stageStatus: Failure
              - step:
                  type: BuildAndPushDockerRegistry
                  name: Build and push an image to Docker Registry
                  identifier: Build_and_push_an_image_to_Docker_Registry
                  spec:
                    connectorRef: Docker_Quickstart
                    repo: nargallegos/ciquickstart
                    tags:
                      - <+pipeline.sequenceId>
                  when:
                    stageStatus: Failure
                  failureStrategies: []
        variables:
          - name: SONARQUBE_ACCESS_KEY
            type: Secret
            description: ""
            value: sonarqube_tutorial_key
    - stage:
        name: Security Scans
        identifier: Sonarqube
        type: SecurityTests
        spec:
          cloneCodebase: true
          sharedPaths:
            - /var/run
            - /var/lib/docker
            - /shared/customer_artifacts
          infrastructure:
            useFromStage: Build_Test_and_Push
          serviceDependencies:
            - identifier: dind_service
              name: dind_service
              type: Service
              spec:
                connectorRef: docker_dind
                image: docker:dind
                privileged: true
                resources:
                  limits:
                    memory: 6G
                    cpu: 1000m
          execution:
            steps:
              - step:
                  type: Run
                  name: docker connector
                  identifier: docker_connector
                  spec:
                    connectorRef: docker_dind
                    image: docker:dind
                    shell: Sh
                    command: |
                      while ! docker ps ;do   
                            echo "Docker not available yet"  
                      done  
                      echo "Docker Service Ready"  
                      docker ps  
                  failureStrategies: []
              - step:
                  type: Run
                  name: OWASP Scan
                  identifier: OWASP_Scan
                  spec:
                    connectorRef: docker_alpine
                    image: docker:dind
                    shell: Sh
                    command: |-
                      while ! docker ps ;do   
                            echo "Docker not available yet"  
                      done  
                      echo "Docker Service Ready"  
                      docker ps  

                      DC_VERSION="latest"
                      DC_DIRECTORY=$HOME/OWASP-Dependency-Check
                      DC_PROJECT="dependency-check scan: $(pwd)"
                      DATA_DIRECTORY="$DC_DIRECTORY/data"
                      CACHE_DIRECTORY="$DC_DIRECTORY/data/cache"

                      if [ ! -d "$DATA_DIRECTORY" ]; then
                          echo "Initially creating persistent directory: $DATA_DIRECTORY"
                          mkdir -p "$DATA_DIRECTORY"
                      fi
                      if [ ! -d "$CACHE_DIRECTORY" ]; then
                          echo "Initially creating persistent directory: $CACHE_DIRECTORY"
                          mkdir -p "$CACHE_DIRECTORY"
                      fi
                      ls -lhart

                      # Make sure we are using the latest version
                      docker pull owasp/dependency-check:$DC_VERSION

                      docker run --rm \
                          -e user=$USER \
                          -u $(id -u ${USER}):$(id -g ${USER}) \
                          --volume $(pwd):/src:z \
                          --volume "$DATA_DIRECTORY":/usr/share/dependency-check/data:z \
                          --volume $(pwd)/odc-reports:/report:z \
                          owasp/dependency-check:$DC_VERSION \
                          --scan /src \
                          --format "ALL" \
                          --project "$DC_PROJECT" \
                          --out /report
                    envVariables:
                      DC_VERSION: "\"latest\""
                      DC_DIRECTORY: "\"dependency-check scan: $(pwd)\""
                      DC_PROJECT: "\"dependency-check scan: $(pwd)\""
                      DATA_DIRECTORY: "\"$DC_DIRECTORY/data\""
                      CACHE_DIRECTORY: "\"$DC_DIRECTORY/data/cache\""
                    resources:
                      limits:
                        memory: 2G
                        cpu: 1000m
              - parallel:
                  - step:
                      type: Security
                      name: Sonarqube Scan
                      identifier: Sonarqube_Scan
                      spec:
                        privileged: true
                        settings:
                          policy_type: orchestratedScan
                          scan_type: repository
                          product_name: sonarqube
                          product_config_name: default
                          repository_project: https://github.com/ngallegos-ib/goHelloWorldServer
                          repository_branch: master
                          product_access_token: <+secrets.getValue("sonarqube_tutorial_key")>
                          product_domain: https://sonarqube.intellibridgelabs.io/
                          product_project_name: harness-tutorial-pipeline
                          product_project_key: harness-tutorial-pipeline
                      failureStrategies: []
                  - step:
                      type: Security
                      name: OWASP
                      identifier: OWASP
                      spec:
                        privileged: true
                        settings:
                          policy_type: ingestionOnly
                          scan_type: repository
                          product_name: owasp
                          product_config_name: owasp 5.x
                          repository_project: goHelloWorldServer
                          repository_branch: <+codebase.branch>
                          manual_upload_filename: report.json
                          customer_artifacts_path: /shared/customer_artifacts
                        imagePullPolicy: Always
                      failureStrategies:
                        - onFailure:
                            errors:
                              - AllErrors
                            action:
                              type: Ignore
                      when:
                        stageStatus: Success
                        condition: <+pipeline.variables.run_owasp_scan> == true
        variables:
          - name: SONARQUBE_ACCESS_KEY
            type: Secret
            description: ""
            value: sonarqube_tutorial_key
    - stage:
        name: Run Integration Test
        identifier: Run_Integration_Test
        type: CI
        spec:
          cloneCodebase: true
          infrastructure:
            useFromStage: Build_Test_and_Push
          serviceDependencies:
            - identifier: Run_Hello_World_Server
              name: Run Hello World Server
              type: Service
              spec:
                connectorRef: Docker_Quickstart
                image: nargallegos/ciquickstart:<+pipeline.sequenceId>
          execution:
            steps:
              - step:
                  type: Run
                  name: test connection to server
                  identifier: test_connection_to_server
                  spec:
                    connectorRef: Docker_Quickstart
                    image: curlimages/curl:7.73.0
                    shell: Sh
                    command: |-
                      sleep 10  
                      curl localhost:8080  
                      curl localhost:8080?Hello!_I_am_a_nice_demo!
        variables: []
